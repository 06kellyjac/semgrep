name: tests

on:
  workflow_dispatch:
  pull_request:
    paths-ignore:
      - "**.md"
  push:
    branches:
      - develop
    paths-ignore:
      - "**.md"

permissions:
  contents: read
  packages: write

jobs:
  build:
    name: Build Docker image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          submodules: true

      - id: docker-meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/${{ github.repository }}
          flavor: latest=false
          tags: type=raw,value=raw-${{ github.event.pull_request.head.sha }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          build-args: SEMGREP_VERSION=dev
          push: true
          tags: ${{ steps.docker-meta.outputs.tags }}
          labels: ${{ steps.docker-meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max

  test-core:
    name: test semgrep-core
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/${{ github.repository }}:sha-${{ github.event.pull_request.head.sha }}
    needs: [build]
    steps:
      - name: Test semgrep-core
        run: |
          eval $(opam env)
          cd semgrep-core
          START=`date +%s`
          make test
          make e2etest
          END=`date +%s`
          TEST_RUN_TIME=$((END-START))
          curl --fail -L -X POST "https://dashboard.semgrep.dev/api/metric/semgrep.core.test-run-time-seconds.num" -d "$TEST_RUN_TIME"
      - name: Report Number of Tests Stats
        if: github.ref == 'refs/heads/develop'
        run: |
          ./semgrep-core/tests/report_test_metrics.sh

  benchmark-core:
    name: benchmark semgrep-core
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/${{ github.repository }}:sha-${{ github.event.pull_request.head.sha }}
    needs: [build]
    steps:
      # TODO: move this to a stable host for more reliable results.
      #
      # It's not clear how to push the stats only when "on the main
      # branch". The GitHub Actions documentation is unhelpful. So we
      # keep things simple and publish the results every time.
      #
      - name: Publish match performance
        run: |
          # This runs a short test suite to track the match performance
          # of semgrep-core over time. The results are pushed to the
          # dashboard at https://dashboard.semgrep.dev/
          #
          opam exec -- make -C semgrep-core report-perf

  test-cli:
    name: test semgrep cli
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/${{ github.repository }}:sha-${{ github.event.pull_request.head.sha }}
    needs: [build]
    steps:
      - run: pytest

  test-on-public-repos:
    name: run semgrep on public repos
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/${{ github.repository }}:sha-${{ github.event.pull_request.head.sha }}
    needs: [build]
    steps:
      - uses: actions/cache@v2
        with:
          path: ~/.cache/semgrep-cache
          key: semgrep-repo-cache-test
      - name: create cache dir if not exists
        run: mkdir -p ~/.cache/semgrep-cache
      - run: touch ~/.cache/semgrep-cache/ok
      - name: Test semgrep
        working-directory: semgrep
        run: PATH=/github/home/.local/bin:$PATH pytest -n auto -vv --tb=short --durations=0 tests/qa/test_public_repos.py
        env:
          GITHUB_REPO_CACHE: ~/.cache/semgrep-cache

  # Run abbreviated version of benchmarks to check that they work
  benchmark-quick:
    name: semgrep dummy benchmarks
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/${{ github.repository }}:sha-${{ github.event.pull_request.head.sha }}
    needs: [build]
    steps:
      - name: Test dummy benchmarks on latest
        working-directory: semgrep
        run: |
          semgrep --version
          python -m semgrep --version
          semgrep-core -version
          cd ..
          python3 perf/run-benchmarks --dummy

  # Run each benchmark twice to decrease effect of natural variance
  benchmark-full:
    name: semgrep benchmark tests
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/${{ github.repository }}:sha-${{ github.event.pull_request.head.sha }}
    needs: [build]
    steps:
      - name: Run 0.82.0 Timing Benchmark
        run: |
          pip install semgrep==0.82.0
          semgrep --version
          python3 -m semgrep --version
          export PATH=/github/home/.local/bin:$PATH

          python3 perf/run-benchmarks --small-only --std-only --save-to semgrep/baseline_timing1.json --no-time
          jq . semgrep/baseline_timing1.json
          python3 perf/run-benchmarks --small-only --std-only --save-to semgrep/baseline_timing2.json --no-time
          jq . semgrep/baseline_timing2.json
          pip uninstall -y semgrep
      - name: Get timing for latest semgrep
        run: |
          cd semgrep
          pipenv run semgrep --version
          pipenv run python -m semgrep --version
          pipenv run semgrep-core -version
          pipenv run python3 ../perf/run-benchmarks --small-only --std-only --save-to timing1.json
          jq . timing1.json
          pipenv run python3 ../perf/run-benchmarks --small-only --std-only --save-to timing2.json --save-findings-to findings.json
          jq . timing2.json
          jq . findings.json
      - name: Compare timing infos
        run: |
          perf/compare-perf semgrep/baseline_timing1.json semgrep/baseline_timing2.json semgrep/timing1.json semgrep/timing2.json ${{ secrets.GITHUB_TOKEN }} ${{ github.event.number }}
          perf/compare-bench-findings semgrep/findings.json
